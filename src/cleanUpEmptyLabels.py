import os
import sys
#generated by geminy2.5 on this prompt:
#could you create me a simple python script, which would delete empty txt files in a folder?
#i want to remove the images which has no labels, meaning the label file is empty.
#i have folder images where the images are, then i have folder labels where the labels are.

# --- Configuration ---
IMAGE_FOLDER = '/home/patrik/Documents/bc-proj-opencv/dataset_v3/ch12/ch12_no_det/images'  # <<< CHANGE THIS to your images folder path
LABEL_FOLDER = '/home/patrik/Documents/bc-proj-opencv/dataset_v3/ch12/ch12_no_det/labels'  # <<< CHANGE THIS to your labels folder path

# List of image extensions to check for (case-insensitive). Add more if needed.
IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tif', '.tiff']

# Safety Feature: Set to False to actually delete files.
# True = only report what would be deleted.
DRY_RUN = False
# --- End Configuration ---


"""
Finds empty .txt files in LABEL_FOLDER and deletes them along with
their corresponding image files in IMAGE_FOLDER.
"""
# Get absolute paths for clarity in messages
image_folder_abs = os.path.abspath(IMAGE_FOLDER)
label_folder_abs = os.path.abspath(LABEL_FOLDER)
image_extensions_lower = [ext.lower() for ext in IMAGE_EXTENSIONS] # For case-insensitive matching

print("-" * 60)
print("Image and Empty Label File Cleanup Script")
print("-" * 60)
print(f"Image Folder: {image_folder_abs}")
print(f"Label Folder: {label_folder_abs}")
print(f"Image Extensions to Check: {', '.join(IMAGE_EXTENSIONS)}")

if DRY_RUN:
    print("\n*** DRY RUN MODE ENABLED ***")
    print("No files will be deleted. Set DRY_RUN = False to enable deletion.")
else:
    print("\n*** WARNING: DELETE MODE ENABLED ***")
    print("Files WILL be deleted permanently from both folders.")
    try:
        confirm = input("Type 'yes' to proceed with deletion: ").lower()
        if confirm != 'yes':
            print("Aborting script. No files were deleted.")
            sys.exit()
    except EOFError: # Handle non-interactive environments gracefully
        print("\nNon-interactive mode detected. Aborting safety confirmation. Exiting.")
        sys.exit(1)
    print("Proceeding with deletion...")

print("-" * 60)

# --- Input Validation ---
if not os.path.isdir(image_folder_abs):
    print(f"Error: Image folder not found at '{image_folder_abs}'")
    sys.exit(1)
if not os.path.isdir(label_folder_abs):
    print(f"Error: Label folder not found at '{label_folder_abs}'")
    sys.exit(1)

# --- Processing ---
deleted_image_count = 0
deleted_label_count = 0
processed_label_count = 0
empty_label_count = 0

print("Scanning label folder...")
# Iterate through all items in the label folder
for label_filename in os.listdir(label_folder_abs):
    label_filepath = os.path.join(label_folder_abs, label_filename)

    # Process only files with a .txt extension (case-insensitive)
    if os.path.isfile(label_filepath) and label_filename.lower().endswith('.txt'):
        processed_label_count += 1
        try:
            # Check if the label file is empty (has size 0)
            if os.path.getsize(label_filepath) == 0:
                empty_label_count += 1
                print(f"\n[Empty Label Found]: {label_filename}")

                # Derive the base name (filename without extension)
                base_name = os.path.splitext(label_filename)[0]
                image_found_for_deletion = False

                # Try to find the corresponding image file in the image folder
                for ext in image_extensions_lower:
                    image_filename = base_name + ext
                    image_filepath = os.path.join(image_folder_abs, image_filename)

                    if os.path.isfile(image_filepath):
                        image_found_for_deletion = True
                        print(f"  [Matching Image]:  {image_filename}")

                        if not DRY_RUN:
                            # --- Perform Deletion ---
                            try:
                                # Delete the image file
                                os.remove(image_filepath)
                                print(f"    [DELETED Image]: {image_filepath}")
                                deleted_image_count += 1

                                # Delete the empty label file
                                os.remove(label_filepath)
                                print(f"    [DELETED Label]: {label_filepath}")
                                deleted_label_count += 1

                            except OSError as e:
                                print(f"    [Error Deleting]: Could not delete {image_filename} or {label_filename}. Error: {e}")
                        else:
                            # --- Dry Run Report ---
                            print(f"    [Dry Run] Would delete image: {image_filepath}")
                            print(f"    [Dry Run] Would delete label: {label_filepath}")

                        break # Found the matching image, no need to check other extensions

                if not image_found_for_deletion:
                     # Check if the label file *still* exists (it might have been deleted above if DRY_RUN=False but image delete failed)
                    if os.path.exists(label_filepath):
                         print(f"  [Warning]: No corresponding image found in '{IMAGE_FOLDER}' for empty label '{label_filename}'.")
                    # If the label file *doesn't* exist anymore (was deleted), no warning needed.


        except OSError as e:
            print(f"\n[Error Accessing]: Could not access label file '{label_filename}'. Error: {e}")
        except Exception as e:
             print(f"\n[Unexpected Error]: An error occurred processing '{label_filename}'. Error: {e}")


# --- Summary ---
print("-" * 60)
print("Script Summary")
print("-" * 60)
print(f"Total label files (.txt) scanned: {processed_label_count}")
print(f"Empty label files found:          {empty_label_count}")

if DRY_RUN:
    potential_deletions = sum(1 for label_fn in os.listdir(label_folder_abs) # Recalculate potential based on dry run output logic
                              if os.path.isfile(os.path.join(label_folder_abs, label_fn)) and
                              label_fn.lower().endswith('.txt') and
                              os.path.getsize(os.path.join(label_folder_abs, label_fn)) == 0 and
                              any(os.path.isfile(os.path.join(image_folder_abs, os.path.splitext(label_fn)[0] + ext)) for ext in image_extensions_lower))
    print(f"Images that WOULD be deleted:   {potential_deletions}")
    print(f"Labels that WOULD be deleted:   {potential_deletions}")
    print("\nReminder: DRY RUN mode was active. No files were actually changed.")
else:
    print(f"Images actually deleted:          {deleted_image_count}")
    print(f"Empty labels actually deleted:    {deleted_label_count}")
print("-" * 60)

